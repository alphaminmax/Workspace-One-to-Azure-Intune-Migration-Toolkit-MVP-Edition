<#
.SYNOPSIS
    Displays a dashboard for monitoring component relationship health and metrics.

.DESCRIPTION
    This script generates a visual dashboard that displays relationship metrics between 
    migration solution components. It leverages test results from Test-ComponentRelationships.ps1
    to present an interactive view of component health, integration cohesion, failure impact,
    and response time dependencies.

.PARAMETER TestResultsPath
    Path to the test results JSON file generated by Test-ComponentRelationships.ps1.
    If not specified, the script will look for the most recent results file.

.PARAMETER RefreshInterval
    Number of seconds between dashboard refreshes when running in monitoring mode.
    Default: 60 seconds

.PARAMETER MonitorMode
    When enabled, the dashboard will refresh automatically at the specified interval.
    Default: $false

.EXAMPLE
    .\Show-ComponentRelationshipDashboard.ps1
    Displays the dashboard using the most recent test results.

.EXAMPLE
    .\Show-ComponentRelationshipDashboard.ps1 -TestResultsPath "C:\Temp\ComponentTests\Results.json" -MonitorMode -RefreshInterval 30
    Displays the dashboard using the specified results file and refreshes every 30 seconds.
#>

[CmdletBinding()]
param (
    [Parameter()]
    [string]$TestResultsPath = "",
    
    [Parameter()]
    [int]$RefreshInterval = 60,
    
    [Parameter()]
    [switch]$MonitorMode = $false
)

#region Variables and Setup
$DefaultResultsPath = "$env:TEMP\ComponentTests"
$script:ConsoleWidth = $Host.UI.RawUI.WindowSize.Width
$script:ConsoleHeight = $Host.UI.RawUI.WindowSize.Height
$script:Components = @(
    "RollbackMechanism",
    "MigrationVerification",
    "UserCommunication", 
    "ProfileTransfer",
    "AutopilotIntegration"
)
$script:TestResults = $null
$script:RelationshipMatrix = @{}
#endregion

#region Helper Functions
function Find-LatestResultsFile {
    [CmdletBinding()]
    param()
    
    if (-not (Test-Path -Path $DefaultResultsPath)) {
        Write-Error "Default results path not found: $DefaultResultsPath"
        return $null
    }
    
    $latestFile = Get-ChildItem -Path $DefaultResultsPath -Filter "ComponentTestResults_*.json" |
                  Sort-Object -Property LastWriteTime -Descending |
                  Select-Object -First 1 -ExpandProperty FullName
    
    if (-not $latestFile) {
        Write-Error "No test result files found in $DefaultResultsPath"
        return $null
    }
    
    return $latestFile
}

function Load-TestResults {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [string]$Path
    )
    
    if (-not (Test-Path -Path $Path)) {
        Write-Error "Test results file not found: $Path"
        return $false
    }
    
    try {
        $script:TestResults = Get-Content -Path $Path -Raw | ConvertFrom-Json
        
        # Build relationship matrix
        $script:RelationshipMatrix = @{}
        
        foreach ($result in $script:TestResults.Results) {
            if ($result.TestName -like "Complete-*") {
                $parts = $result.TestName.Split('-')
                if ($parts.Count -ge 3) {
                    $componentA = $parts[1]
                    $componentB = $parts[2]
                    
                    if (-not $script:RelationshipMatrix.ContainsKey($componentA)) {
                        $script:RelationshipMatrix[$componentA] = @{}
                    }
                    
                    $script:RelationshipMatrix[$componentA][$componentB] = $result
                }
            }
        }
        
        return $true
    }
    catch {
        Write-Error "Failed to load test results: $_"
        return $false
    }
}

function Get-StatusColor {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [bool]$Success
    )
    
    if ($Success) {
        return "Green"
    }
    else {
        return "Red"
    }
}

function Get-FIPColor {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [string]$FIP
    )
    
    switch ($FIP) {
        "Low" { return "Green" }
        "Medium" { return "Yellow" }
        "High" { return "Red" }
        default { return "Gray" }
    }
}

function Get-ICSColor {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [int]$ICS
    )
    
    if ($ICS -le 3) { return "Green" }
    elseif ($ICS -le 7) { return "Yellow" }
    else { return "Magenta" }
}

function Get-RTDColor {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [string]$RTD
    )
    
    switch ($RTD) {
        "Async" { return "Green" }
        "Hybrid" { return "Yellow" }
        "Sync" { return "Cyan" }
        default { return "Gray" }
    }
}

function Write-CenteredText {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [string]$Text,
        
        [Parameter()]
        [ConsoleColor]$ForegroundColor = [ConsoleColor]::White
    )
    
    $padding = [math]::Max(0, ($script:ConsoleWidth - $Text.Length) / 2)
    Write-Host (" " * [math]::Floor($padding)) -NoNewline
    Write-Host $Text -ForegroundColor $ForegroundColor
}

function Write-StatusBar {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [int]$Total,
        
        [Parameter(Mandatory=$true)]
        [int]$Passed,
        
        [Parameter()]
        [int]$Width = 50
    )
    
    $passRate = if ($Total -gt 0) { ($Passed / $Total) * 100 } else { 0 }
    $barWidth = [math]::Min($Width, $script:ConsoleWidth - 20)
    $filledWidth = [math]::Round(($passRate / 100) * $barWidth)
    
    $bar = "[" + ("█" * $filledWidth) + (" " * ($barWidth - $filledWidth)) + "]"
    
    $color = if ($passRate -ge 90) { "Green" }
             elseif ($passRate -ge 70) { "Yellow" }
             else { "Red" }
    
    Write-Host " Status: " -NoNewline
    Write-Host $bar -NoNewline -ForegroundColor $color
    Write-Host " $([math]::Round($passRate, 1))%" -ForegroundColor $color
}

function Write-BoxedHeader {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [string]$Title
    )
    
    $boxWidth = [math]::Min(60, $script:ConsoleWidth - 4)
    $padding = [math]::Max(0, ($boxWidth - $Title.Length - 2) / 2)
    $leftPad = [math]::Floor($padding)
    $rightPad = [math]::Ceiling($padding)
    
    $horizontalLine = "+" + ("-" * ($boxWidth - 2)) + "+"
    $titleLine = "|" + (" " * $leftPad) + $Title + (" " * $rightPad) + "|"
    
    $consolePadding = [math]::Max(0, ($script:ConsoleWidth - $boxWidth) / 2)
    
    Write-Host (" " * $consolePadding) -NoNewline
    Write-Host $horizontalLine -ForegroundColor Cyan
    Write-Host (" " * $consolePadding) -NoNewline
    Write-Host $titleLine -ForegroundColor Cyan
    Write-Host (" " * $consolePadding) -NoNewline
    Write-Host $horizontalLine -ForegroundColor Cyan
}

function Clear-DashboardArea {
    Clear-Host
}
#endregion

#region Dashboard Display Functions
function Show-DashboardHeader {
    [CmdletBinding()]
    param()
    
    $timestamp = if ($script:TestResults) { 
        $script:TestResults.EndTime 
    } else { 
        Get-Date 
    }
    
    Write-BoxedHeader "Component Relationship Dashboard"
    Write-CenteredText "Last Updated: $timestamp" -ForegroundColor Gray
    Write-CenteredText "Test Mode: $($script:TestResults.Mode)" -ForegroundColor Gray
    Write-Host ""
    
    if ($script:TestResults) {
        Write-StatusBar -Total $script:TestResults.TestsRun -Passed $script:TestResults.TestsPassed
    }
    
    Write-Host ""
}

function Show-ComponentMatrix {
    [CmdletBinding()]
    param()
    
    # Header row
    Write-Host "  " -NoNewline
    foreach ($component in $script:Components) {
        $shortName = $component.Substring(0, [math]::Min(8, $component.Length))
        Write-Host " $shortName" -NoNewline -ForegroundColor Cyan
        Write-Host " " -NoNewline
    }
    Write-Host ""
    
    # Component rows
    foreach ($componentA in $script:Components) {
        $shortNameA = $componentA.Substring(0, [math]::Min(8, $componentA.Length))
        Write-Host "$shortNameA" -NoNewline -ForegroundColor Cyan
        
        foreach ($componentB in $script:Components) {
            if ($componentA -eq $componentB) {
                Write-Host " " -NoNewline
                Write-Host "   ---   " -NoNewline -ForegroundColor DarkGray
            }
            else {
                $relationshipExists = $false
                $status = "·"
                $statusColor = "DarkGray"
                
                if ($script:RelationshipMatrix.ContainsKey($componentA) -and 
                    $script:RelationshipMatrix[$componentA].ContainsKey($componentB)) {
                    $relationshipExists = $true
                    $result = $script:RelationshipMatrix[$componentA][$componentB]
                    
                    if ($result.Success) {
                        $status = "✓"
                        $statusColor = "Green"
                    }
                    else {
                        $status = "✗"
                        $statusColor = "Red"
                    }
                }
                elseif ($script:RelationshipMatrix.ContainsKey($componentB) -and 
                        $script:RelationshipMatrix[$componentB].ContainsKey($componentA)) {
                    $relationshipExists = $true
                    $result = $script:RelationshipMatrix[$componentB][$componentA]
                    
                    if ($result.Success) {
                        $status = "✓"
                        $statusColor = "Green"
                    }
                    else {
                        $status = "✗"
                        $statusColor = "Red"
                    }
                }
                
                Write-Host " " -NoNewline
                
                if ($relationshipExists) {
                    Write-Host "   $status   " -NoNewline -ForegroundColor $statusColor
                }
                else {
                    Write-Host "         " -NoNewline
                }
            }
        }
        
        Write-Host ""
    }
}

function Show-RelationshipDetails {
    [CmdletBinding()]
    param()
    
    Write-Host ""
    Write-Host "Relationship Details:" -ForegroundColor Cyan
    Write-Host "=====================" -ForegroundColor Cyan
    
    foreach ($componentA in $script:RelationshipMatrix.Keys) {
        foreach ($componentB in $script:RelationshipMatrix[$componentA].Keys) {
            $relationship = $script:RelationshipMatrix[$componentA][$componentB]
            $additionalData = $relationship.AdditionalData
            
            Write-Host ""
            Write-Host "$componentA <-> $componentB" -ForegroundColor Yellow
            
            # Status
            $statusColor = Get-StatusColor -Success $relationship.Success
            Write-Host "  Status: " -NoNewline
            Write-Host $(if($relationship.Success){"Healthy"}else{"Failed"}) -ForegroundColor $statusColor
            
            if (-not $relationship.Success) {
                Write-Host "  Error: $($relationship.ErrorMessage)" -ForegroundColor Red
            }
            
            # Metrics
            if ($additionalData) {
                # Integration Cohesion Score
                $ics = $additionalData.ICS
                if ($ics) {
                    $icsColor = Get-ICSColor -ICS $ics
                    Write-Host "  Integration Cohesion: " -NoNewline
                    Write-Host "$ics" -ForegroundColor $icsColor -NoNewline
                    Write-Host " ($(if($ics -le 3){'Loosely coupled'}elseif($ics -le 7){'Moderately coupled'}else{'Tightly coupled'}))"
                }
                
                # Failure Impact Propagation
                $fip = $additionalData.FIP
                if ($fip) {
                    $fipColor = Get-FIPColor -FIP $fip
                    Write-Host "  Failure Impact: " -NoNewline
                    Write-Host "$fip" -ForegroundColor $fipColor
                }
                
                # Response Time Dependency
                $rtd = $additionalData.RTD
                if ($rtd) {
                    $rtdColor = Get-RTDColor -RTD $rtd
                    Write-Host "  Response Time Dependency: " -NoNewline
                    Write-Host "$rtd" -ForegroundColor $rtdColor
                }
                
                # Response time (if available)
                $responseTime = $relationship.ResponseTimeMs
                if ($responseTime -gt 0) {
                    $responseColor = if ($responseTime -lt 50) { "Green" }
                                     elseif ($responseTime -lt 200) { "Yellow" }
                                     else { "Red" }
                    Write-Host "  Response Time: " -NoNewline
                    Write-Host "$responseTime ms" -ForegroundColor $responseColor
                }
            }
        }
    }
}

function Show-Dashboard {
    [CmdletBinding()]
    param()
    
    Clear-DashboardArea
    Show-DashboardHeader
    Show-ComponentMatrix
    Show-RelationshipDetails
    
    if ($MonitorMode) {
        Write-Host ""
        Write-Host "Monitoring mode active. Next refresh in $RefreshInterval seconds..." -ForegroundColor Gray
        Write-Host "Press Ctrl+C to exit." -ForegroundColor Gray
    }
}
#endregion

#region Main Execution
# Find the test results file
if (-not $TestResultsPath) {
    $TestResultsPath = Find-LatestResultsFile
    
    if (-not $TestResultsPath) {
        Write-Error "Could not find test results file. Run Test-ComponentRelationships.ps1 first."
        exit 1
    }
}

# Load the results
$resultsLoaded = Load-TestResults -Path $TestResultsPath
if (-not $resultsLoaded) {
    exit 1
}

# Display the dashboard
if ($MonitorMode) {
    try {
        while ($true) {
            Show-Dashboard
            Start-Sleep -Seconds $RefreshInterval
            $resultsLoaded = Load-TestResults -Path $TestResultsPath
            if (-not $resultsLoaded) {
                Write-Error "Failed to refresh results. Continuing with previous data."
            }
        }
    }
    catch [System.Management.Automation.PipelineStoppedException] {
        # Ctrl+C was pressed
        Write-Host "Monitoring stopped." -ForegroundColor Yellow
    }
}
else {
    Show-Dashboard
}
#endregion 